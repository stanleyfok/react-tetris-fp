{"version":3,"sources":["tetris-bg.mp3","Tetris/components/Pixel/Pixel.js","Tetris/components/Grid/Grid.js","Tetris/types/Shapes/Shape.js","Tetris/types/Shapes/SquareShape.js","Tetris/types/Shapes/BarShape.js","Tetris/types/Shapes/FlipLShape.js","Tetris/types/Shapes/LShape.js","Tetris/types/Shapes/SShape.js","Tetris/types/Shapes/TShape.js","Tetris/types/Shapes/ZShape.js","Tetris/types/Shapes/ShapeFactory.js","Tetris/types/Grid.js","Tetris/types/GameState.js","Tetris/Tetris.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pixel","props","classNames","isFilled","push","className","join","defaultProps","Grid","gridContent","grid","map","row","i","rowContent","col","j","key","Shape","TypeError","this","size","orientations","position","rotation","getShapeOrientation","shape","SquareShape","BarShape","FlipLShape","LShape","SShape","TShape","ZShape","SHAPE_TYPES","SQUARE","T","S","Z","BAR","L","FLIP_L","cloneShape","newShape","constructor","name","getRandomShape","totalShapes","Object","keys","length","type","getShapeByType","Math","floor","random","createGrid","rows","cols","getEmptyMap","cloneGrid","Array","fill","addShapeToGrid","newGrid","orientation","forEach","_","actualX","actualY","clearFullRows","flow","clearFullRowsFromGridMap","curry","padRowsToGridMap","filter","reduce","acc","value","ACTION","MOVE_DOWN","MOVE_LEFT","MOVE_RIGHT","ROTATE","createGameState","currentShape","getNextShape","unclearedGrid","displayGrid","isGameOver","cloneGameState","gameState","getShapeInitialPosition","getNextGameState","action","nextGameState","isCollided","hasCollision","Tetris","handleKeyDown","e","keyCode","rotateShape","moveShapeLeft","moveShapeRight","moveShapeDown","startNewGame","normalInterval","setState","timer","setTimeout","doGameTick","alert","speedUpSpeed","isSpeedUp","state","document","addEventListener","removeEventListener","React","Component","App","src","tetrisBg","autoPlay","loop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69626252.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris-bg.4ae866dc.mp3\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Pixel.css\";\n\n// pure component ðŸŒŸ\nfunction Pixel(props) {\n  const { isFilled } = props;\n\n  const classNames = [\"pixel\"];\n  if (isFilled) {\n    classNames.push(\"pixel--filled\");\n  }\n\n  return <div className={classNames.join(\" \")}></div>;\n}\n\nPixel.propTypes = {\n  isFilled: PropTypes.bool\n};\n\nPixel.defaultProps = {\n  isFilled: false\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Pixel from \"../Pixel/Pixel\";\n\nimport \"./Grid.css\";\n\n// pure component ðŸŒŸ\nfunction Grid(props) {\n  const { map } = props.grid;\n\n  const gridContent = map.map((row, i) => {\n    const rowContent = row.map((col, j) => {\n      return <Pixel key={`pixel-${i},${j}`} isFilled={col} />;\n    });\n\n    return <div key={`row-${i}`}>{rowContent}</div>;\n  });\n\n  return <div className=\"grid\">{gridContent}</div>;\n}\n\nGrid.propTypes = {\n  grid: PropTypes.object.isRequired\n};\n\nexport default Grid;\n","export default class Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new TypeError(\"Cannot construct Shape instances directly\");\n    }\n\n    // to be overidden\n    this.size = 0;\n    this.orientations = null;\n\n    // other properties\n    this.position = [0, 0];\n    this.rotation = 0;\n  }\n}\n\n// pure function ðŸŒŸ\nexport const getShapeOrientation = shape => {\n  return shape.orientations[shape.rotation];\n};\n","import Shape from \"./Shape\";\n\nclass SquareShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 2;\n    this.orientations = [\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ];\n  }\n}\n\nexport default SquareShape;\n","import Shape from \"./Shape\";\n\nclass BarShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 4;\n    this.orientations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0]\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default BarShape;\n","import Shape from \"./Shape\";\n\nclass FlipLShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 0, 1],\n        [0, 0, 1],\n        [0, 1, 1]\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [1, 1, 0],\n        [1, 0, 0],\n        [1, 0, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default FlipLShape;\n","import Shape from \"./Shape\";\n\nclass LShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 0, 0],\n        [1, 0, 0],\n        [1, 1, 0]\n      ],\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 1],\n        [0, 0, 1],\n        [0, 0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default LShape;\n","import Shape from \"./Shape\";\n\nclass SShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 1],\n        [1, 1, 0],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 0, 1]\n      ]\n    ];\n  }\n}\n\nexport default SShape;\n","import Shape from \"./Shape\";\n\nclass TShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default TShape;\n","import Shape from \"./Shape\";\n\nclass ZShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 1, 0],\n        [0, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default ZShape;\n","import SquareShape from \"./SquareShape\";\nimport BarShape from \"./BarShape\";\nimport FlipLShape from \"./FlipLShape\";\nimport LShape from \"./LShape\";\nimport SShape from \"./SShape\";\nimport TShape from \"./TShape\";\nimport ZShape from \"./ZShape\";\n\nconst SHAPE_TYPES = {\n  SQUARE: 0,\n  T: 1,\n  S: 2,\n  Z: 3,\n  BAR: 4,\n  L: 5,\n  FLIP_L: 6\n};\n\n// pure function ðŸŒŸ\nexport const getShapeByType = type => {\n  switch (type) {\n    case SHAPE_TYPES.SQUARE:\n      return new SquareShape();\n    case SHAPE_TYPES.T:\n      return new TShape();\n    case SHAPE_TYPES.S:\n      return new SShape();\n    case SHAPE_TYPES.Z:\n      return new ZShape();\n    case SHAPE_TYPES.BAR:\n      return new BarShape();\n    case SHAPE_TYPES.L:\n      return new LShape();\n    case SHAPE_TYPES.FLIP_L:\n      return new FlipLShape();\n    default:\n      return new BarShape();\n  }\n};\n\n// pure function ðŸŒŸ\nexport const cloneShape = shape => {\n  const shapeClass = shape.constructor.name;\n  let newShape;\n\n  switch (shapeClass) {\n    case \"SquareShape\":\n      newShape = new SquareShape();\n      break;\n    case \"TShape\":\n      newShape = new TShape();\n      break;\n    case \"SShape\":\n      newShape = new SShape();\n      break;\n    case \"ZShape\":\n      newShape = new ZShape();\n      break;\n    case \"BarShape\":\n      newShape = new BarShape();\n      break;\n    case \"LShape\":\n      newShape = new LShape();\n      break;\n    case \"FlipLShape\":\n      newShape = new FlipLShape();\n      break;\n    default:\n      newShape = new BarShape();\n      break;\n  }\n\n  newShape.position = [...shape.position];\n  newShape.rotation = shape.rotation;\n\n  return newShape;\n};\n\n// impure function due to randomness\nexport const getRandomShape = () => {\n  const totalShapes = Object.keys(SHAPE_TYPES).length;\n  const type = Math.floor(Math.random() * totalShapes);\n\n  return getShapeByType(type);\n};\n","import { flow, curry } from \"lodash/fp\";\nimport { getShapeOrientation } from \"./Shapes/Shape\";\n\n// pure function ðŸŒŸ\nexport const createGrid = (rows, cols) => {\n  return {\n    map: getEmptyMap(rows, cols),\n    rows,\n    cols\n  };\n};\n\n// pure function ðŸŒŸ\nexport const cloneGrid = grid => {\n  return {\n    ...grid,\n    // ðŸŒŸ: clone a 2d array in 1 line\n    map: grid.map.map(row => [...row])\n  };\n};\n\n// pure function ðŸŒŸ\nconst getEmptyMap = (rows, cols) => {\n  // ðŸŒŸ: create a 2d array with init value in 1 line\n  return Array(rows).fill(new Array(cols).fill(false));\n};\n\n// pure function ðŸŒŸ\nexport const hasCollision = (shape, grid) => {\n  const orientation = getShapeOrientation(shape);\n\n  let isCollided = false;\n  // TODO: Not functional enoguh, isCollided is mutated\n  orientation.forEach((row, i) => {\n    row.forEach((_, j) => {\n      // only check if the pixel on the shape is filled\n      if (orientation[i][j] === 1) {\n        const actualX = shape.position[0] + j;\n        const actualY = shape.position[1] + i;\n\n        // ignore if still above the top\n        if (actualY < 0) {\n          return;\n        }\n\n        // check if hitting the bottom wall\n        if (actualY >= grid.rows) {\n          isCollided = true;\n\n          return;\n        }\n\n        // check if hitting the left and right walls\n        if (actualX < 0 || actualX >= grid.cols) {\n          isCollided = true;\n\n          return;\n        }\n\n        // check if hitting an unclear pixel\n        if (grid.map[actualY][actualX] === true) {\n          isCollided = true;\n        }\n      }\n    });\n  });\n\n  return isCollided;\n};\n\n// pure function ðŸŒŸ\nexport const addShapeToGrid = (shape, grid) => {\n  const newGrid = cloneGrid(grid);\n\n  const orientation = getShapeOrientation(shape);\n\n  // TODO: Not functional enoguh, newGrid.map is mutated\n  orientation.forEach((row, i) => {\n    row.forEach((_, j) => {\n      if (orientation[i][j] === 1) {\n        const actualX = shape.position[0] + j;\n        const actualY = shape.position[1] + i;\n\n        if (\n          actualX >= 0 &&\n          actualX < newGrid.cols &&\n          actualY >= 0 &&\n          actualY < newGrid.rows\n        ) {\n          newGrid.map[actualY][actualX] = true;\n        }\n      }\n    });\n  });\n\n  return newGrid;\n};\n\n// pure function ðŸŒŸ\nexport const clearFullRows = grid => {\n  const newGrid = cloneGrid(grid);\n\n  // TODO: Not functional enoguh, newGrid.map is mutated\n  // ðŸŒŸ: method composition\n  newGrid.map = flow(\n    // filter rows that are full\n    clearFullRowsFromGridMap,\n    // pad empty rows back after filter full rows\n    curry(padRowsToGridMap)(grid.rows)(grid.cols)\n  )(grid.map);\n\n  return newGrid;\n};\n\n// pure function ðŸŒŸ\nconst clearFullRowsFromGridMap = map => {\n  return map.filter(row => !row.reduce((acc, value) => (acc &= value), true));\n};\n\n// pure function ðŸŒŸ\nconst padRowsToGridMap = (rows, cols, map) => {\n  return [...getEmptyMap(rows - map.length, cols), ...map];\n};\n","import { flow, curry } from \"lodash/fp\";\nimport { getRandomShape, cloneShape } from \"./Shapes/ShapeFactory\";\nimport {\n  createGrid,\n  cloneGrid,\n  hasCollision,\n  addShapeToGrid,\n  clearFullRows\n} from \"./Grid\";\n\nexport const ACTION = {\n  MOVE_DOWN: 0,\n  MOVE_LEFT: 1,\n  MOVE_RIGHT: 2,\n  ROTATE: 3\n};\n\n// pure function ðŸŒŸ\nexport const createGameState = (rows, cols) => {\n  return {\n    currentShape: getNextShape(cols),\n    unclearedGrid: createGrid(rows, cols),\n    displayGrid: createGrid(rows, cols),\n    isGameOver: false\n  };\n};\n\n// pure function ðŸŒŸ\nexport const cloneGameState = gameState => {\n  return {\n    ...gameState,\n    currentShape: cloneShape(gameState.currentShape),\n    unclearedGrid: cloneGrid(gameState.unclearedGrid),\n    displayGrid: cloneGrid(gameState.displayGrid)\n  };\n};\n\n// impure function due to randomness\n// since generating next shape is by random, it is not predictive\nconst getNextShape = cols => {\n  const shape = getRandomShape();\n\n  shape.rotation = Math.floor(Math.random() * shape.orientations.length);\n  shape.position = getShapeInitialPosition(shape, cols);\n\n  return shape;\n};\n\n// pure function ðŸŒŸ\nconst getShapeInitialPosition = (shape, cols) => {\n  return [\n    Math.floor((cols - shape.size) / 2), // middle of tower\n    -shape.size // top of tower\n  ];\n};\n\n// pure function ðŸŒŸ\nexport const getNextGameState = (action, gameState) => {\n  const nextGameState = cloneGameState(gameState);\n\n  switch (action) {\n    case ACTION.MOVE_DOWN:\n      nextGameState.currentShape.position[1] += 1;\n      break;\n    case ACTION.MOVE_LEFT:\n      nextGameState.currentShape.position[0] -= 1;\n      break;\n    case ACTION.MOVE_RIGHT:\n      nextGameState.currentShape.position[0] += 1;\n      break;\n    case ACTION.ROTATE:\n      nextGameState.currentShape.rotation =\n        (nextGameState.currentShape.rotation + 1) %\n        nextGameState.currentShape.orientations.length;\n      break;\n    default:\n      break;\n  }\n\n  const isCollided = hasCollision(\n    nextGameState.currentShape,\n    nextGameState.unclearedGrid\n  );\n\n  if (isCollided) {\n    if (action === ACTION.MOVE_DOWN) {\n      // ðŸŒŸ: method composition\n      nextGameState.unclearedGrid = flow(\n        curry(addShapeToGrid)(gameState.currentShape),\n        clearFullRows\n      )(nextGameState.unclearedGrid);\n\n      // check if game over\n      if (nextGameState.currentShape.position[1] < 0) {\n        nextGameState.isGameOver = true;\n      } else {\n        nextGameState.currentShape = getNextShape(\n          nextGameState.unclearedGrid.cols\n        );\n      }\n    } else {\n      // just cannot move the shape, so game state keeps unchanged\n      return gameState;\n    }\n  }\n\n  // calculate the grid for display by combining the shape and uncleared grid\n  nextGameState.displayGrid = addShapeToGrid(\n    nextGameState.currentShape,\n    nextGameState.unclearedGrid\n  );\n\n  return nextGameState;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"./components/Grid/Grid\";\n\nimport { ACTION, createGameState, getNextGameState } from \"./types/GameState\";\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    // register events\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n\n    this.startNewGame();\n  }\n\n  componentWillUnmount() {\n    // deregister events\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 32: // SPACE\n      case 38: // UP\n        this.rotateShape();\n        break;\n      case 37: // LEFT\n        this.moveShapeLeft();\n        break;\n      case 39: // RIGHT\n        this.moveShapeRight();\n        break;\n      case 40: // DOWN\n        this.moveShapeDown();\n        break;\n      default:\n        break;\n    }\n  };\n\n  startNewGame = () => {\n    const { rows, cols, normalInterval } = this.props;\n\n    this.gameState = createGameState(rows, cols);\n    this.setState(this.gameState);\n\n    this.timer = setTimeout(this.doGameTick, normalInterval);\n  };\n\n  doGameTick = () => {\n    if (!this.gameState.isGameOver) {\n      const { normalInterval, speedUpSpeed } = this.props;\n\n      this.moveShapeDown();\n\n      // do next tick\n      this.timer = setTimeout(\n        this.doGameTick,\n        normalInterval / (this.gameState.isSpeedUp ? speedUpSpeed : 1)\n      );\n    } else {\n      alert(\"Game Over!\");\n\n      this.startNewGame();\n    }\n  };\n\n  // impure function\n  moveShapeDown = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_DOWN, this.gameState);\n\n    this.setState(this.gameState);\n  };\n\n  // impure function\n  moveShapeLeft = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_LEFT, this.gameState);\n\n    this.setState(this.gameState);\n  };\n\n  // impure function\n  moveShapeRight = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_RIGHT, this.gameState);\n\n    this.setState(this.gameState);\n  };\n\n  // impure function\n  rotateShape = () => {\n    this.gameState = getNextGameState(ACTION.ROTATE, this.gameState);\n\n    this.setState(this.gameState);\n  };\n\n  render() {\n    const { displayGrid } = this.state;\n\n    return <div>{displayGrid && <Grid grid={displayGrid} />}</div>;\n  }\n}\n\nTetris.propTypes = {\n  rows: PropTypes.number.isRequired,\n  cols: PropTypes.number.isRequired,\n  normalInterval: PropTypes.number.isRequired,\n  speedUpSpeed: PropTypes.number.isRequired\n};\n\nTetris.defaultProps = {\n  rows: 20,\n  cols: 10,\n  normalInterval: 400,\n  speedUpSpeed: 5\n};\n\nexport default Tetris;\n","import React from \"react\";\nimport Tetris from \"./Tetris/Tetris\";\nimport tetrisBg from \"./tetris-bg.mp3\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Tetris rows={20} cols={10} normalInterval={400} speedUpSpeed={8} />\n      <audio src={tetrisBg} type=\"audio/mpeg\" autoPlay={true} loop={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}