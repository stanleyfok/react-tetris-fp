{"version":3,"sources":["tetris-bg.mp3","Tetris/components/Pixel/Pixel.js","Tetris/components/Grid/Grid.js","Tetris/types/Shapes/Shape.js","Tetris/types/PixelMap.js","Tetris/types/Shapes/SquareShape.js","Tetris/types/Shapes/BarShape.js","Tetris/types/Shapes/FlipLShape.js","Tetris/types/Shapes/LShape.js","Tetris/types/Shapes/SShape.js","Tetris/types/Shapes/TShape.js","Tetris/types/Shapes/ZShape.js","Tetris/types/Shapes/ShapeFactory.js","Tetris/types/GameState.js","Tetris/Tetris.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pixel","props","classNames","isFilled","push","className","join","defaultProps","Grid","gridContent","pixelMap","map","row","i","rowContent","col","j","key","Shape","clone","shape","size","orientations","position","rotation","TypeError","this","getShapeOrientation","PixelMap","rows","cols","getEmptyMap","Array","fill","addShapeToPixelMap","newPixelMap","orientation","forEach","_","actualX","actualY","SquareShape","BarShape","FlipLShape","LShape","SShape","TShape","ZShape","SHAPE_TYPES","SQUARE","T","S","Z","BAR","L","FLIP_L","getRandomShape","totalShapes","Object","keys","length","getShape","Math","floor","random","ACTION","MOVE_DOWN","MOVE_LEFT","MOVE_RIGHT","ROTATE","GameState","currentShape","unclearedPixelMap","isGameOver","gameState","getInitGameState","getNextShape","getShapeInitialPosition","getNextGameState","action","nextGameState","isCollided","hasCollision","filter","reduce","acc","value","clearFullRows","Tetris","handleKeyDown","e","keyCode","rotateShape","moveShapeLeft","moveShapeRight","moveShapeDown","startNewGame","normalInterval","setState","timer","setTimeout","doGameTick","alert","speedUpSpeed","isSpeedUp","state","document","addEventListener","removeEventListener","React","Component","App","src","tetrisBg","type","autoPlay","loop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.774bce45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris-bg.4ae866dc.mp3\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Pixel.css\";\n\nfunction Pixel(props) {\n  const { isFilled } = props;\n\n  const classNames = [\"pixel\"];\n  if (isFilled) {\n    classNames.push(\"pixel--filled\");\n  }\n\n  return <div className={classNames.join(\" \")}></div>;\n}\n\nPixel.propTypes = {\n  isFilled: PropTypes.bool\n};\n\nPixel.defaultProps = {\n  isFilled: false\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Pixel from \"../Pixel/Pixel\";\n\nimport \"./Grid.css\";\n\nfunction Grid(props) {\n  const { map } = props.pixelMap;\n\n  const gridContent = map.map((row, i) => {\n    const rowContent = row.map((col, j) => {\n      return <Pixel key={`pixel-${i},${j}`} isFilled={col} />;\n    });\n\n    return <div key={`row-${i}`}>{rowContent}</div>;\n  });\n\n  return <div className=\"grid\">{gridContent}</div>;\n}\n\nGrid.propTypes = {\n  pixelMap: PropTypes.object.isRequired\n};\n\nexport default Grid;\n","export default class Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new TypeError(\"Cannot construct Shape instances directly\");\n    }\n\n    // to be overidden\n    this.size = 0;\n    this.orientations = null;\n\n    // other properties\n    this.position = [0, 0];\n    this.rotation = 0;\n  }\n\n  clone = () => {\n    const shape = new Shape();\n    shape.size = this.size;\n    shape.orientations = [...this.orientations];\n    shape.position = [...this.position];\n    shape.rotation = this.rotation;\n\n    return shape;\n  };\n}\n\nexport const getShapeOrientation = shape => {\n  return shape.orientations[shape.rotation];\n};\n","import { getShapeOrientation } from \"./Shapes/Shape\";\n\nexport default class PixelMap {\n  constructor(rows, cols) {\n    this.map = getEmptyMap(rows, cols);\n    this.rows = rows;\n    this.cols = cols;\n  }\n\n  clone() {\n    const pixelMap = new PixelMap(this.rows, this.cols);\n\n    pixelMap.map = this.map.map(row => [...row]);\n\n    return pixelMap;\n  }\n}\n\nconst getEmptyMap = (rows, cols) => {\n  return new Array(rows).fill(new Array(cols).fill(false));\n};\n\nexport const hasCollision = (shape, pixelMap) => {\n  const orientation = getShapeOrientation(shape);\n\n  let isCollided = false;\n  orientation.forEach((row, i) => {\n    row.forEach((_, j) => {\n      // only check if the pixel on the shape is filled\n      if (orientation[i][j] === 1) {\n        const actualX = shape.position[0] + j;\n        const actualY = shape.position[1] + i;\n\n        // ignore if still above the top\n        if (actualY < 0) {\n          return;\n        }\n\n        // check if hitting the bottom wall\n        if (actualY >= pixelMap.rows) {\n          isCollided = true;\n\n          return;\n        }\n\n        // check if hitting the left and right walls\n        if (actualX < 0 || actualX >= pixelMap.cols) {\n          isCollided = true;\n\n          return;\n        }\n\n        // check if hitting an unclear pixel\n        if (pixelMap.map[actualY][actualX] === true) {\n          isCollided = true;\n        }\n      }\n    });\n  });\n\n  return isCollided;\n};\n\nexport const addShapeToPixelMap = (shape, pixelMap) => {\n  const newPixelMap = pixelMap.clone();\n  const orientation = getShapeOrientation(shape);\n\n  orientation.forEach((row, i) => {\n    row.forEach((_, j) => {\n      if (orientation[i][j] === 1) {\n        const actualX = shape.position[0] + j;\n        const actualY = shape.position[1] + i;\n\n        if (\n          actualX >= 0 &&\n          actualX < newPixelMap.cols &&\n          actualY >= 0 &&\n          actualY < newPixelMap.rows\n        ) {\n          newPixelMap.map[actualY][actualX] = true;\n        }\n      }\n    });\n  });\n\n  return newPixelMap;\n};\n\nexport const clearFullRows = pixelMap => {\n  const newPixelMap = pixelMap.clone();\n\n  // filter full rows\n  newPixelMap.map = newPixelMap.map.filter(\n    row => !row.reduce((acc, value) => (acc &= value), true)\n  );\n\n  // append empty rows back\n  newPixelMap.map = [\n    ...getEmptyMap(newPixelMap.rows - newPixelMap.map.length, newPixelMap.cols),\n    ...newPixelMap.map\n  ];\n\n  return newPixelMap;\n};\n","import Shape from \"./Shape\";\n\nclass SquareShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 2;\n    this.orientations = [\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ];\n  }\n}\n\nexport default SquareShape;\n","import Shape from \"./Shape\";\n\nclass BarShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 4;\n    this.orientations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0]\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default BarShape;\n","import Shape from \"./Shape\";\n\nclass FlipLShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 0, 1],\n        [0, 0, 1],\n        [0, 1, 1]\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [1, 1, 0],\n        [1, 0, 0],\n        [1, 0, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default FlipLShape;\n","import Shape from \"./Shape\";\n\nclass LShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 0, 0],\n        [1, 0, 0],\n        [1, 1, 0]\n      ],\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 1],\n        [0, 0, 1],\n        [0, 0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default LShape;\n","import Shape from \"./Shape\";\n\nclass SShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 1],\n        [1, 1, 0],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 0, 1]\n      ]\n    ];\n  }\n}\n\nexport default SShape;\n","import Shape from \"./Shape\";\n\nclass TShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default TShape;\n","import Shape from \"./Shape\";\n\nclass ZShape extends Shape {\n  constructor() {\n    super();\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 1, 0],\n        [0, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default ZShape;\n","import SquareShape from \"./SquareShape\";\nimport BarShape from \"./BarShape\";\nimport FlipLShape from \"./FlipLShape\";\nimport LShape from \"./LShape\";\nimport SShape from \"./SShape\";\nimport TShape from \"./TShape\";\nimport ZShape from \"./ZShape\";\n\nconst SHAPE_TYPES = {\n  SQUARE: 0,\n  T: 1,\n  S: 2,\n  Z: 3,\n  BAR: 4,\n  L: 5,\n  FLIP_L: 6\n};\n\nconst getShape = shape => {\n  switch (shape) {\n    case SHAPE_TYPES.SQUARE:\n      return new SquareShape();\n    case SHAPE_TYPES.T:\n      return new TShape();\n    case SHAPE_TYPES.S:\n      return new SShape();\n    case SHAPE_TYPES.Z:\n      return new ZShape();\n    case SHAPE_TYPES.BAR:\n      return new BarShape();\n    case SHAPE_TYPES.L:\n      return new LShape();\n    case SHAPE_TYPES.FLIP_L:\n      return new FlipLShape();\n    default:\n      return new BarShape();\n  }\n};\n\nexport const getRandomShape = () => {\n  const totalShapes = Object.keys(SHAPE_TYPES).length;\n  const shape = Math.floor(Math.random() * totalShapes);\n\n  return getShape(shape);\n};\n","import { getRandomShape } from \"./Shapes/ShapeFactory\";\nimport PixelMap, {\n  hasCollision,\n  addShapeToPixelMap,\n  clearFullRows\n} from \"./PixelMap\";\nimport { getShapeOrientation } from \"./Shapes/Shape\";\n\nexport const ACTION = {\n  MOVE_DOWN: 0,\n  MOVE_LEFT: 1,\n  MOVE_RIGHT: 2,\n  ROTATE: 3\n};\n\nexport default class GameState {\n  constructor(rows, cols) {\n    this.currentShape = null;\n    this.unclearedPixelMap = new PixelMap(rows, cols);\n    this.isGameOver = false;\n  }\n\n  clone() {\n    const gameState = new GameState();\n\n    gameState.currentShape = this.currentShape.clone();\n    gameState.unclearedPixelMap = this.unclearedPixelMap.clone();\n    gameState.isGameOver = this.isGameOver;\n\n    return gameState;\n  }\n}\n\n// impure function\nexport const getInitGameState = (rows, cols) => {\n  const gameState = new GameState(rows, cols);\n\n  gameState.currentShape = getNextShape(gameState.unclearedPixelMap);\n\n  return gameState;\n};\n\n// impure function\n// since generating next shape is by random, it is not predictive\n// but we can make the calculation of position be pure function\nconst getNextShape = pixelMap => {\n  const shape = getRandomShape();\n\n  shape.rotation = Math.floor(Math.random() * shape.orientations.length);\n\n  // position is obtained via a pure function, testable\n  shape.position = getShapeInitialPosition(shape, pixelMap);\n\n  return shape;\n};\n\n// pure function\nconst getShapeInitialPosition = (shape, pixelMap) => {\n  return [\n    Math.floor((pixelMap.cols - shape.size) / 2), // middle of tower\n    -shape.size // top of tower\n  ];\n};\n\n// pure function\nexport const getNextGameState = (action, gameState) => {\n  const nextGameState = gameState.clone();\n\n  switch (action) {\n    case ACTION.MOVE_DOWN:\n      nextGameState.currentShape.position[1] += 1;\n      break;\n    case ACTION.MOVE_LEFT:\n      nextGameState.currentShape.position[0] -= 1;\n      break;\n    case ACTION.MOVE_RIGHT:\n      nextGameState.currentShape.position[0] += 1;\n      break;\n    case ACTION.ROTATE:\n      nextGameState.currentShape.rotation =\n        (nextGameState.currentShape.rotation + 1) %\n        nextGameState.currentShape.orientations.length;\n      break;\n    default:\n      break;\n  }\n\n  const isCollided = hasCollision(\n    nextGameState.currentShape,\n    nextGameState.unclearedPixelMap\n  );\n\n  if (isCollided) {\n    if (action === ACTION.MOVE_DOWN) {\n      nextGameState.unclearedPixelMap = addShapeToPixelMap(\n        gameState.currentShape, // use old state's shape position\n        nextGameState.unclearedPixelMap\n      );\n\n      // clear full rows\n      nextGameState.unclearedPixelMap = clearFullRows(\n        nextGameState.unclearedPixelMap\n      );\n\n      // nextGameState.pixelMap = nextGameState.unclearedPixelMap;\n\n      // check if game over\n      if (nextGameState.currentShape.position[1] < 0) {\n        nextGameState.isGameOver = true;\n      } else {\n        nextGameState.currentShape = getNextShape(\n          nextGameState.unclearedPixelMap\n        );\n      }\n    } else {\n      // just cannot move the shape, so game state keeps unchanged\n      return gameState;\n    }\n  } else {\n    // use new position\n    // nextGameState.pixelMap = addShapeToPixelMap(\n    //   nextGameState.currentShape,\n    //   nextGameState.unclearedPixelMap\n    // );\n  }\n\n  return nextGameState;\n};\n\nexport const checkGameOver = shape => {\n  const orientation = getShapeOrientation(shape);\n\n  let isGameOver = false;\n\n  orientation.forEach((row, i) => {\n    row.forEach((col, j) => {\n      if (orientation[i][j] === 1) {\n        const actualY = shape.position[1] + i;\n\n        // ignore if still above the top\n        if (actualY < 0) {\n          isGameOver = true;\n        }\n      }\n    });\n  });\n\n  return isGameOver;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"./components/Grid/Grid\";\nimport { addShapeToPixelMap } from \"./types/PixelMap\";\n\nimport { ACTION, getNextGameState, getInitGameState } from \"./types/GameState\";\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    // register events\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n\n    this.startNewGame();\n  }\n\n  componentWillUnmount() {\n    // deregister events\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 32: // SPACE\n      case 38: // UP\n        this.rotateShape();\n        break;\n      case 37: // LEFT\n        this.moveShapeLeft();\n        break;\n      case 39: // RIGHT\n        this.moveShapeRight();\n        break;\n      case 40: // DOWN\n        this.moveShapeDown();\n        break;\n      default:\n        break;\n    }\n  };\n\n  startNewGame = () => {\n    const { rows, cols, normalInterval } = this.props;\n    this.gameState = getInitGameState(rows, cols);\n\n    this.setState({\n      pixelMap: addShapeToPixelMap(\n        this.gameState.currentShape,\n        this.gameState.unclearedPixelMap\n      )\n    });\n\n    this.timer = setTimeout(this.doGameTick, normalInterval);\n  };\n\n  doGameTick = () => {\n    if (!this.gameState.isGameOver) {\n      const { normalInterval, speedUpSpeed } = this.props;\n\n      this.moveShapeDown();\n\n      // do next tick\n      this.timer = setTimeout(\n        this.doGameTick,\n        normalInterval / (this.gameState.isSpeedUp ? speedUpSpeed : 1)\n      );\n    } else {\n      alert(\"Game Over!\");\n\n      this.startNewGame();\n    }\n  };\n\n  // impure function\n  moveShapeDown = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_DOWN, this.gameState);\n\n    this.setState({\n      pixelMap: addShapeToPixelMap(\n        this.gameState.currentShape,\n        this.gameState.unclearedPixelMap\n      )\n    });\n  };\n\n  // impure function\n  moveShapeLeft = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_LEFT, this.gameState);\n\n    this.setState({\n      pixelMap: addShapeToPixelMap(\n        this.gameState.currentShape,\n        this.gameState.unclearedPixelMap\n      )\n    });\n  };\n\n  // impure function\n  moveShapeRight = () => {\n    this.gameState = getNextGameState(ACTION.MOVE_RIGHT, this.gameState);\n\n    this.setState({\n      pixelMap: addShapeToPixelMap(\n        this.gameState.currentShape,\n        this.gameState.unclearedPixelMap\n      )\n    });\n  };\n\n  // impure function\n  rotateShape = () => {\n    this.gameState = getNextGameState(ACTION.ROTATE, this.gameState);\n\n    this.setState({\n      pixelMap: addShapeToPixelMap(\n        this.gameState.currentShape,\n        this.gameState.unclearedPixelMap\n      )\n    });\n  };\n\n  render() {\n    const { pixelMap } = this.state;\n\n    return <div>{pixelMap && <Grid pixelMap={pixelMap} />}</div>;\n  }\n}\n\nTetris.propTypes = {\n  rows: PropTypes.number.isRequired,\n  cols: PropTypes.number.isRequired,\n  normalInterval: PropTypes.number.isRequired,\n  speedUpSpeed: PropTypes.number.isRequired\n};\n\nTetris.defaultProps = {\n  rows: 20,\n  cols: 10,\n  normalInterval: 400,\n  speedUpSpeed: 5\n};\n\nexport default Tetris;\n","import React from \"react\";\nimport Tetris from \"./Tetris/Tetris\";\nimport tetrisBg from \"./tetris-bg.mp3\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Tetris rows={20} cols={10} normalInterval={400} speedUpSpeed={8} />\n      <audio src={tetrisBg} type=\"audio/mpeg\" autoPlay={true} loop={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}